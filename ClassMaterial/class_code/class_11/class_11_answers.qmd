---
title: "Class 11 notes and code"
format: pdf
editor: source
editor_options: 
  chunk_output_type: console
---




# Part 1: Critical values of the normal distribution

We use the mosaic packages `mosaic::cnorm()` function to get critical values z*
from a normalized normal distribution to create confidence intervals for
different confidence levels. Additionally, if we want to visualize the area in
the center of a normal curve, we can use the `mosaic::xcnorm()` function.

For example, if we want the critical value z* for a 90% confidence interval, we
can use `mosaic::cnorm(.90)` to get the z* values -1.645 and 1.645.

We can then use $\bar{x} \pm 1.645 \cdot SE$ to create a 90% confidence interval
for a mean.



```{r}

# install.packages("mosaic")

# to get the critical values and visualize the area in the central of a 
# normal curve for a 95% confidence interval we can use mosaic::xcnorm(.95)

critical_values <- mosaic::xcnorm(.95)

critical_values



# if we just want the critical value and not the visualization we can use 
# mosaic::cnorm()

critical_value <- mosaic::cnorm(.95, side = "upper")

critical_value


```





$\\$







# Part 2: Creating confidence intervals on real data



$\\$



##  Confidence interval example 1: One true love? 


A survey asked 2625 people whether they agreed with the statement: 
"There is only one true love for each person"

1812 of the respondents disagreed.

Compute a 90% confidence interval for the proportion who disagreed.





```{r}

library(SDS1000)


# Create the data set

belives_in_true_love <- c(rep(FALSE, 1812), rep(TRUE, 2625 - 1812))


# Calculate the proportion of people who believe in one true love
# Note: if you use the get_proportion function the word "TRUE" needs to be in quotes

(obs_prop <- get_proportion(belives_in_true_love, "TRUE"))




# Get an example of a bootstrap statistics 

# We can use the sample(data_vec, n) to get a sample of length n:

boot_sample <- sample(belives_in_true_love, 2625, replace = TRUE)
bootstrap_prop <- get_proportion(boot_sample, "TRUE")



# Create a bootstrap distribution in R

boot_dist <- do_it(10000)  *  {

  boot_sample <- sample(belives_in_true_love, 2625, replace = TRUE)
  
  get_proportion(boot_sample, "TRUE")
  
}



# Visualize the bootstrap distribution

hist(boot_dist, 20)




# Get the bootstrap standard error SE*

SE_boot <- sd(boot_dist)





# Create a 90% confidence interval

CI_lower <-  obs_prop  - qnorm(.95) * SE_boot 
CI_upper <-  obs_prop  + qnorm(.95) * SE_boot 

c(CI_lower, CI_upper)



```







$\\$






## Confidence interval example 2: Average body temperature


Let's create a 95% confidence interval for the mean body temperatures of humans
using a sample of 50 people from the data collected by Machowaik et al (1992). 

The data is loaded below from the Lock5 package. Start by visualizing the data
then please create a 95% confidence interval for the mean body temperature using
the bootstrap!



```{r bodytemp_viz}

# Load the data 
library(Lock5Data)

body_temps <- BodyTemp50$BodyTemp




# Start by visualizing the data

hist(body_temps, main = "Body Temperatures", 
     breaks = 20,
     xlab = "Temperature (Â°F)", col = "lightblue", border = "black")


```




Now create a 95% confidence interval for the mean body temperature using the
bootstrap!

See if you can also create a 80% and 99% confidence interval as well!




```{r bodytemp_CI}


# Calculate the observed mean

(obs_mean <- mean(body_temps))





# Create a bootstrap distribution in R

boot_dist <- do_it(10000)  *  {

  boot_sample <- sample(body_temps, length(body_temps), replace = TRUE)
  
  mean(boot_sample)
  
}



# Visualize the bootstrap distribution

hist(boot_dist, 100)




# Get the bootstrap standard error SE*

SE_boot <- sd(boot_dist)




# Create a 95% confidence interval

CI_lower <-  obs_mean  - 2 * SE_boot 
CI_upper <-  obs_mean  + 2 * SE_boot 

c(CI_lower, CI_upper)



# Create a 80% confidence interval

(CI_80 <-  c(obs_mean - qnorm(.90) * SE_boot, obs_mean + qnorm(.90) * SE_boot))



# Create a 99% confidence interval

(CI_99 <-  c(obs_mean - qnorm(.995) * SE_boot, obs_mean + qnorm(.995) * SE_boot))




```




$\\$




# Part 3: Hypothesis tests

In order to run a hypothesis test, we need to simulate statistics that would
occur if "nothing interesting" is happening; i.e., if the "null hypothesis" is
true.

For hypothesis tests that involve proportions, we can do this by simulating
flipping a coin k times, where k is the number of trials in our original data
set. We can then count the number of heads we get, and see if this is larger
than the number (or proportion) of positive outcomes we observed in our original
data set.

Using the `SDS1000` package, we can simulate coin flips using the `rflip_count()`
function. For example, if we flip a coin 100 times, where each flip has a 50%
chance of being heads, we can use `rflip_count(100, 0.5)` to get the number of
heads we observed in our 100 flips.

```{r coin_flip_example}

library(SDS1000)

#set.seed(1234)


rflip_count(100, 0.5)


```


Can do one simulation of the Doris and Buzz example?  How many times do you 
need to flip the coin to simulate the experiment that was run? 


```{r doris_buzz_simulation}

# How many times do we need to flip the coin?
n_flips <- 16

# Simulate one experiment
rflip_count(n_flips, 0.5)

```



To see if the result we observed in the Doris and Buzz experiment is unusual, we can
repeat the simulation many times to create a null distribution of statistics. We
can then see how many of the simulated statistics are as extreme or more extreme
than the statistic we observed in the original experiment.



```{r doris_buzz_null_distribution}

# How many times do we need to flip the coin?
n_flips <- 16

# Simulate the null distribution
null_dist <- do_it(10000) * {
  rflip_count(n_flips, 0.5)
}

# Visualize the null distribution
hist(null_dist, brekas = 50, main = "Null Distribution of Heads in 16 Flips", 
     xlab = "Number of Heads", xlim = c(0, 16))

abline(v = 15, col = "red")

```





