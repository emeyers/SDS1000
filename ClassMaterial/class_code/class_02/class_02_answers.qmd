---
title: "Class 2 notes and code"
format: pdf
editor: source
editor_options: 
  chunk_output_type: console
---






# Part 1:  Quarto


Quarto documents allow one to create reproducible analyses that include both
written explanations as well as R code. We will use Quarto documents for all the
class code and for the homework. For more information on Quarto see <https://quarto.org/>




$\\$





### 1.1 Rendering Quarto documents


We can render a Quarto document to a pdf document by pressing the **Render button** 
which is located at the top of the Quarto file in RStudio (the button has an
arrow symbol). This will generate a pdf that includes both content as well as
the output of any embedded R code chunks within the document.


**Note**: When working on the homework, please be sure to render the Quarto 
document often so that you can tell right away when you make a mistake.
Otherwise, it will be very difficulty to debug your code at the end when you try
to submit the homework.




$\\$




### 1.2 Getting the homework

We can get/go to homework 1 by running the code in the chunk below. Often
you will run this function on the console. 


```{r get_homework_1, eval = FALSE}

library(SDS1000)

goto_homework(1)

```




We can go back to the class 2 material by running the function below. 


```{r get_class_2, eval = FALSE}

goto_class(2)

```



$\\$




### 1.3 LaTeX symbols

We can include LaTeX symbols in our Quarto documents. For example, we can 
write the Greek letter alpha using the code $\alpha$. 

We can also write subscripts using underscores. For example, $x_{original}$.


Sometimes we will want to put marks above characters such as a hat above a letter.
For example, we can write $\hat{y}$ to get a hat above the letter y.


**Exercise**: Try writing p-hat subscript 27... 


$\\$



**Answer:**

$\hat{p}_{27}$




$\\$






# Part 2: Very quick review of the concepts discussed last class


Let's quickly review of the ideas we discussed last class by answering the
following questions:

1. What is a population?    

2. What is a sample?     

3. What is statistical inference?

4. What are the rows of a data table called??  

5. What are the columns of a data table called?  

6. What is the difference between categorical and quantitative variables? 

7. Who is shown in the image below: 

$\\$

![Who is depicted in this image?](person.png){width=50%, height=50%}



$\\$



**Answers**  (please type your answers below) 

1. A population is all individuals/objects of interest  (Truth)

2. A sample is a subset of the population  (shadows)

3. Statistical inference involves making judgments about the population using data from the sample  

4. The rows of a data table called cases/observational units

5. The columns of a data table called variables

6. Categorical variables fall into discrete categories Quantitative variables are numbers.

7. That is an image of Plato!



$\\$





# Part 3: Introduction to R


Let's now discuss some of the basics of R!




### 3.1 Running R code

We can run R code on the console or inside of R chunks. If we press the green
"play" button at the top of the R chunk, this is the same as running the code
in the console. 


```{r simple_math}

2 + 3

7 * 5

```



$\\$




### 3.2 Assigning values to objects


We can assign values to objects using the assignment operator `<-`. 

Note, there cannot be any spaces in between the `<` and `-` symbols.

Any object that is placed on a line by itself will print the value stored in
that object. This is how you will "show your work" on the homework; i.e., show
that you have the correct answer.


```{r assignment_example}

a <- 4
b <- 7

z <- a + b

z

```




$\\$




### 3.3 Characters strings and Booleans

Character strings are text values that are surrounded by either single or double.

Boolean values are either TRUE or FALSE.

We can use the `class()` function to determine the type of value is stored in an object.



```{r characters_and_booleans}

a <- 7

s <- "Statistics is great!"

b <- TRUE


class(a)

class(s)


```






$\\$





### 3.4 Functions

Functions are used to perform specific tasks. Usually they take input values
and return an output value.

Function use syntax that ends with parenthesis: functionName(x)

Any ideas what the functions below do?

1. sqrt(49)	

2. tolower("DATA is AWESOME!")


Try them out in the R chunk below!



```{r functions_example}

sqrt(49)

tolower("DATA is AWESOME!")


```


To get information about a function, use the ? before the function name. 

For example: ? sqrt


```{r function_help, eval = FALSE}

? sqrt

```





$\\$






### 3.5 Comments

Comments are used to explain code and are ignored by R. We write comments using the # symbol. 

```{r comments_example}

# This is a comment

a <- 7  # This is also a comment

# Usually we want out comments to say something meaningful...
b <- 3   # assigning the value 3 to the object b

```





$\\$





### 3.6 Vectors

Vectors are used to store multiple values in a single object. We can create
vectors using the c() function.

We can access values in a vector using square brackets [].


```{r vectors_example}

v <- c(2, 3, 5, 7, 11)

v

s <- c("these", "are", "some", "strings")


s[3]


```




$\\$





### 3.7 Vectors continued

We can create sequences of numbers using the `:` operator. 

We can also apply functions to vectors. Please try out the following functions
on the vector of numbers `z` that is created below:

1. sqrt(z)
2. sum(z)
3. z > 3

Can you tell what these functions are doing? 

What happens if you try sqrt("Hello")  ?




$\\$





# Part 4: Analyzing categorical data in R


Let's now look at analyzing categorical data in R!




$\\$





### 4.1 Getting a simulated sample of sprinkles


We can use the SDS1000 function `get_sprinkle_sample()` to get a vector of random
sprinkle colors. 

```{r sprinkle_sample}

# Load the SDS1000 package
library(SDS1000)

# Setting the seed so that we all get the same "random sample"
set.seed(1000)  



# Get a random sample of 100 sprinkles
sprinkle_sample <- get_sprinkle_sample(100)


# Show the first 10 sprinkles in the sample
sprinkle_sample[1:10]



```






$\\$





### 4.2 Frequency table

We can use the `table()` function to create a frequency table of the sprinkle colors.

```{r sprinkle_frequency_table}

# Create a frequency table of the sprinkle colors

sprinkle_count_table <- table(sprinkle_sample)

sprinkle_count_table

```





$\\$





### 4.2 Relative frequency tables

We can use the `prop.table()` function to create a relative frequency table of
the sprinkle colors.

Note: The `prop.table()` takes a frequency table as input, and **not** the
original vector of data

We can also get the proportion at a *specific factor level* using the SDS1000
function `get_proportion()`.


```{r sprinkle_relative_frequency_table}

# Create a relative frequency table of the sprinkle colors
sprinkle_prop_table  <- prop.table(sprinkle_count_table)

sprinkle_prop_table 


# Note that the sum of the proportions is 1
sum(sprinkle_prop_table)


# Get the proportion of red sprinkles using the SDS1000 get_proportion() function
get_proportion(sprinkle_sample, "red")


```





$\\$






### 4.3 Bar plots and pie charts

We can use the `barplot()` function to create a bar plot of the sprinkle colors.

We can also use the `pie()` function to create a pie chart of the sprinkle colors.

Note: Both functions take a frequency table as input, and **not** the original
vector of data. 

```{r sprinkle_barplot_and_pie_chart}

# Create a bar plot of the sprinkle colors
barplot(sprinkle_count_table, ylab = "Count")


# Create a pie chart of the sprinkle colors
pie(sprinkle_count_table)

```


Can you figure out how to change the color of the segments in the pie chart?






$\\$





![It's raining sprinkles, hallelujah](raining.jpg){width=50%, height=50%}




