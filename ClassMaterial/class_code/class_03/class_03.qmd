---
title: "Class 3 notes and code"
format: pdf
editor: source
editor_options: 
  chunk_output_type: console
---




# Part 1: Analyzing categorical data in R


Let's now look at analyzing categorical data in R!




$\\$





### 1.1 Getting a simulated sample of sprinkles


We can use the SDS1000 function `get_sprinkle_sample()` to get a vector of random
sprinkle colors. 

```{r sprinkle_sample}

# Load the SDS1000 package
library(SDS1000)

# Setting the seed so that we all get the same "random sample"
set.seed(1000)  



# Get a random sample of 100 sprinkles
sprinkle_sample <- get_sprinkle_sample(100)


# Show the first 10 sprinkles in the sample
sprinkle_sample[1:10]



```






$\\$





### 2.2 Frequency table

We can use the `table()` function to create a frequency table of the sprinkle colors.

```{r sprinkle_frequency_table}

# Create a frequency table of the sprinkle colors






```





$\\$





### 2.3 Relative frequency tables

We can use the `prop.table()` function to create a relative frequency table of
the sprinkle colors.

Note: The `prop.table()` takes a frequency table as input, and **not** the
original vector of data

We can also get the proportion at a *specific factor level* using the SDS1000
function `get_proportion()`.


```{r sprinkle_relative_frequency_table}


# Create a relative frequency table of the sprinkle colors




# Note that the sum of the proportions is 1




# Get the proportion of red sprinkles using the SDS1000 get_proportion() function




```





$\\$






### 2.4 Bar plots and pie charts

We can use the `barplot()` function to create a bar plot of the sprinkle colors.

We can also use the `pie()` function to create a pie chart of the sprinkle colors.

Note: Both functions take a frequency table as input, and **not** the original
vector of data. 

```{r sprinkle_barplot_and_pie_chart}


# Create a bar plot of the sprinkle colors




# Create a pie chart of the sprinkle colors




```


Can you figure out how to change the color of the segments in the pie chart?






$\\$








# Part 2: Analyzing two categorical variables


Let's examine analyzing two categorical variables by looking at some of the data
from the class background survey. In particular, let's look the relationship
between the month a student was born and whether they were one of the youngest
or oldest students in their grade.



$\\$





### 2.1 Load the data


The code below loads the data from the class background survey and creates two new variables:

- `birth_month`: The month the student was born
- `youngest_oldest`: Whether the student was one of the youngest or oldest in their grade


```{r load_data}


# load the survey data as a data frame
load("survey_birth_data.rda")



# Extract a vector object for birth month




# Extract a vector object for oldest/youngest







```




$\\$



### 2.2 Create a contingency table

We can use the `table()` function to create a contingency table of the two categorical variables.

```{r contingency_table}


# Create a contingency table of birth month and age position




# Print the contingency table




```



$\\$




### 2.3 Create a relative frequency table

We can use the `prop.table()` function to create a relative frequency table of the contingency table.
In particular, suppose for each month we want to know the proportion of students that were among the youngest, middle, or oldest in their grade; i.e., we want to calculate $\hat{p}_{older | month}$

If we want to calculate the relative frequencies within each row in R (i.e., for each birth month), we can use the `margin` argument and set it to 1. Conversely, if we wanted to calculate the relative frequencies within each column (i.e., for younger, middle and older), we would set `margin` to 2.

Let's create a relative frequency table of the contingency table where the relative frequencies are calculated within each row (i.e., for each birth month).


```{r relative_frequency_table}


# Create a relative frequency table of the contingency table




# Print the relative frequency table





```




$\\$




### 2.4 Visualize the data with a mosaic plot


We can use the `mosaicplot()` function to create a mosaic plot of the contingency table.

```{r mosaic_plot}


# Create a mosaic plot of the contingency table








```




$\\$




# Part 3: Analyzing a single quantitative variable


Let's examine analyzing a single quantitative variable by looking the [Gapminder
data set](https://www.youtube.com/watch?v=jbkSRLYSojo) which contains
information about different countries. We will focus on data from the year 2007
only, which is loaded below. 

Key variables in the Gapminder data set include:

- `country`: The country of the observation
- `continent`: The continent of the observation
- `year`: The year of the observation
- `lifeExp`: Life expectancy at birth (in years)
- `pop`: Population of the country
- `gdpPercap`: Gross domestic product per capita (in dollars)


$\\$


### 3.1 Load the data

The code below loads the Gapminder data set and show the first 6 rows of the data. 
The code also creates three new vector objects which are: 

- `continents`: which contains the continent that each country is in.
- `lifeExp_2007`: which contains the life expectancy data for the year 2007 only
- `population`: which contains the population of each country in 2007 


```{r load_gapminder_data}

load("gapminder_2007.rda")

# Show the first 5 rows of the data
head(gapminder_2007)


# Extract a vector of continent data



# Extract a vector of life expectancy data



# Extract a vector of the population size of each country





```




$\\$


### 3.2 More practice analyzing categorical data

For more practice analyzing categorical data, please see can create barplot 
showing how many countries are in each continent.



```{r practice_categorical_data}

# 1. Create a frequency table showing how many countries are in each continent




# 2. Create a barplot of the frequency of countries in each continent






```


$\\$




### 3.3 Histograms

Let's now create a histogram of the life expectancy data for the year 2007. We
can do this using the `hist()` function along with the vector of life expectancy
data we created in part 2.1 which is stored in the object `life_expectancy`.

Questions:

1. What shape does this histogram have? Is it symmetric, right-skewed, or left-skewed?
2. Are there any extreme outliers in the data? 


```{r histogram_life_expectancy}

# Create a histogram of life expectancy






```


**Answers:** 

1. 


2. 




$\\$





### 3.4 Descriptive statistics for the central tendency: the mean and median

We can use the `mean()` and `median()` functions to calculate the mean and median
of a sample of data. 

Let's calculate the mean and median of the life expectancy data for the year 2007.

Are these values what you would expect based on the skew of the data?

```{r mean_median_life_expectancy}

# Calculate the mean of life expectancy




# Calculate the median of life expectancy



```





